from itertools import count
from django.contrib.auth.models import User
from django.core.paginator import Paginator
from django.db.models.functions import Concat
from django.http import HttpResponse
from rest_framework import status
from  project.models import Project, Task
from django.shortcuts import render
from django.db.models import F, Value, Count, Avg
from django.utils import timezone
from django.db.models.functions import ExtractWeekDay
# from colorama import init, Fore, Back, Style
from rest_framework.decorators import api_view
from project.serializers import ProjectListSerializer, TaskListSerializer
from rest_framework.response import Response


# Create your views here.

# ___ 26.06.2025 Task11: –ü–µ—Ä–≤—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
@api_view(['GET'])
def list_project(request):
    projects = Project.objects.all()
    if projects.exists():
        serializer = ProjectListSerializer(projects, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    else:
        return Response(status=status.HTTP_404_NOT_FOUND)


# ___ 26.06.2025 Task12: –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏ Task
@api_view(['GET'])
def list_tasks(request):
    tasks = Task.objects.all()
    if tasks.exists():
        serializer = TaskListSerializer(tasks, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)
    else:
        return Response(status=status.HTTP_404_NOT_FOUND)



# def test(request):
    # ____ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ø—Ä–æ–µ–∫—Ç–∞:
    # new_project = Project.objects.create(name='New_Project', language='c++')    # —Ç—É—Ç c++ - —Å –ú–ê–õ–ï–ù–¨–ö–û–ô –±—É–∫–≤—ã.
    # new_project.save()  # –°–û–•–†–ê–ù–ò–¢–¨ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç

    # ____ –£–î–ê–õ–ï–ù–ò–ï –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞:
    # del_projects = Project.objects.filter(id__gte=6)
    # del_projects.delete()

    # ____ –ú–æ–∂–Ω–æ –°–†–ê–ó–£ –≤—ã–∑–≤–∞—Ç—å Project –∏ –°–û–ó–î–ê–¢–¨ –≠–ö–ó–ï–ú–ü–õ–Ø–† –∫–ª–∞—Å—Å–∞:
    # Project.objects.create(name='5th Project', description='This is a description', language='Python')

    # ____ –ú–ê–°–°–û–í–û–ï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ë–î:
    # project_1 = Project(name='ABC', description='hohoh', language='c')
    # project_2 = Project(name='xyz', description='Coordinates', language='py')
    # project_3 = Project(name='Beautiful Day', language='java')
    # projects = [project_1, project_2, project_3]
    # Project.objects.bulk_create(projects)

    # ____ –ú–ê–°–°–û–í–û–ï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è (language) –¥–ª—è –í–°–ï–• –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ë–î:
    # data_projects = Project.objects.all()
    # for project in data_projects:
    #     # if project.language == 'py':
    #     #     project.language = 'java'
    #     project.language='py'
    # Project.objects.bulk_update(data_projects, ['language'])

    # ____ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫ –∏–º–µ–Ω–∏ —è–∑—ã–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.
    # Project.objects.update(name=F('name') + F('language'))
    # Project.objects.update(name=Concat(F('name'), Value(' '), F('language')))

    # Project.objects.update(name=Concat(F('name'), Value(' '), F('lang')))

    # projects = Project.objects.filter(created_at__gte="2025-06-25")
    # print(projects)

    # for project in projects:
    #     print(f' üîé Project name is {project.name} and it was created at {project.created_at}')
    # print(f'The number of projects is {projects.count()}')

    # # –ê–Ω–Ω–æ—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã  –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    # annotated_projects = Project.objects.annotate(week_day=ExtractWeekDay('created_at'))
    # project_per_day = annotated_projects.filter(week_day = 2) # –ü—Ä–æ–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ Monday
    # for n, project in enumerate(project_per_day, start=1):
    #     print(f'{n} - Project title is "{project.name}"')

    # # –í—ã–≤–æ–¥ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    # print(f'The total number of projects is {Project.objects.all().count()}')

    # # –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞—Å–∫–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    # projects = Project.objects.all()
    # for project in projects:
    #     task_count = project.tasks.aggregate(count=Count('id'), average_count=Avg('id'))
    #     print(f"Project: {project} -> number of tasks: {task_count['count']}, average number of tasks: {task_count['average_count']}")
    #


    # annotated_users = User.objects.annotate(number_of_tasks=Count('tasks__id')).values_list('username', 'number_of_tasks')
    # for user in annotated_users:
    #     print(f"User {user[0]} has following number of tasks: {user[1]}")



    # # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–æ–¥–µ–ª—å Task.
    # # –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ–∑–∞–¥–∞—á–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—è–º:
    # # - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    # # - –¥–µ–¥–ª–∞–π–Ω
    # # –í—ã–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    # tasks = Task.objects.all().order_by('priority', 'due_date')
    # for task in tasks:
    #     print(f"Tasks title is: {task.name}, has priority: {task.priority} and has dead line at: {task.due_date}")



    # # ___ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á
    #
    # annot_users = User.objects.all().annotate(tasks_number=Count('tasks__id'))
    # ordered_users = annot_users.order_by('-tasks_number').values_list('username', 'tasks_number')
    # for user in ordered_users:
    #     print(f" For {user[0]} NUMBER of tasks is {user[1]}")



    # # ___ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –∑–∞–¥–∞—á
    # all_tasks = Task.objects.all()
    # paginator = Paginator(all_tasks, 2)
    # tasks_per_page = paginator.get_page(2)
    # for tasks in tasks_per_page:
    #     print(f"{'':-<60}")
    #     print(f'Tasks: {tasks}, priority: {tasks.priority}, due date: {tasks.due_date} ')
    #


    # return HttpResponse("Congrats, you are in Project applications!")

