from datetime import timedelta
from django.shortcuts import render
from django.http import HttpResponse
from django.utils import timezone
from django.db.models import Q
from TaskManager_app.models import Task, Project, SubTask, Category
from TaskManager_app.serializers import TaskCreateSerializer, AllTasksListSerializer, TaskByIDSerializer, \
    SubTaskCreateSerializer, CategorySerializer, CategoryCreateUpdateSerializer, TaskListSerializer
from rest_framework.decorators import api_view, action
from rest_framework import status
from rest_framework.response import Response
from django.db.models import Count
from django.utils.timezone import now
from rest_framework.pagination import PageNumberPagination

from config.paginations import BookCursorPagination
from . import permissions
from .filters import SubTaskFilter
from rest_framework import generics, filters
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.filters import SearchFilter, OrderingFilter
from TaskManager_app.serializers import TaskCreateSerializer, TaskByIDSerializer
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from TaskManager_app.permissions import IsAdminOrOwner

# _____ HW_20
from rest_framework.permissions import AllowAny
from .serializers import RegisterSerializer
from django.contrib.auth.models import User
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.views import APIView
from rest_framework import status
from rest_framework_simplejwt.views import TokenObtainPairView
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework_simplejwt.authentication import JWTAuthentication



# _____ –ó–∞–¥–∞–Ω–∏–µ 5 HW_13: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏ (SubTasks), –≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏
# —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞—Å—Å—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π (APIView) –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
# ______ –®–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∑–∞–¥–∞—á (SubTaskListCreateView).
# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á (SubTaskDetailUpdateDeleteView).
# –î–æ–±–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ñ–∞–π–ª–µ urls.py, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–ª–∞—Å—Å—ã.
from rest_framework.views import APIView
from TaskManager_app.models import SubTask

# _____ HW_14 –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
# –ó–∞–¥–∞–Ω–∏–µ 1:
# –ù–∞–ø–∏—Å–∞—Ç—å, –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏.
# –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª—Å—è - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–≤–æ–¥–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏.
# –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –≤—Ç–æ—Ä–Ω–∏–∫) - –≤—ã–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.
from datetime import datetime
import calendar

# _____ –ó–∞–¥–∞–Ω–∏–µ 1 HW_12: –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
# –°–æ–∑–¥–∞–π—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–ª—è–º–∏ title, description, status, –∏ deadline.
# –®–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏ Task.
# –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.
# –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é.

# _____ HW_15 Task1.
# –ó–∞–º–µ–Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á (Tasks) –Ω–∞ Generic Views
# –®–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
# –ó–∞–º–µ–Ω–∏—Ç–µ –∫–ª–∞—Å—Å—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á –Ω–∞ Generic Views:
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ListCreateAPIView –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RetrieveUpdateDestroyAPIView –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á.
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∏—Å–∫ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É:
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–æ–ª—è–º status –∏ deadline.
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—è–º title –∏ description.
# –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –ø–æ–ª—é created_at.

# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# @api_view(['POST']) def new_task(...)
# @api_view(['GET']) def all_tasks_list(...)
# @api_view(['GET']) def view_task_by_id(...)

# @api_view(['POST']) # - –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ generic view
# def new_task(request):
#     serializer = TaskCreateSerializer(data=request.data)
#     if serializer.is_valid():
#         try:
#             serializer.save()
#             return Response(serializer.data, status=status.HTTP_201_CREATED)
#         except Exception as e:
#             return Response({'detail': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
#     return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# # _____ Task 2 HW_12. –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë ID
    # –°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –Ω–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è:
    # –ü–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    # –ü–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID
    #   –®–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
    # –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏.
    # –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º.

# # _____ Task1 HW_12 –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
# # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HW_15 Task1
# @api_view(['GET']) # - –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ generic view
# def all_tasks_list(request):
#     tasks = Task.objects.all()
#     serializer = AllTasksListSerializer(tasks, many=True)
#     return Response(serializer.data, status=status.HTTP_200_OK)

# # _____ Task 2 HW_12. –ó–∞–¥–∞—á–∞ –ø–æ ID
# # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HW_15 Task1
# @api_view(['GET']) # - –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ generic view
# def view_task_by_id(request, task_id):
#     try:
#         task = Task.objects.get(id=task_id)
#     except Task.DoesNotExist:
#         return Response({'error': 'Task not found'}, status=status.HTTP_404_NOT_FOUND)
#     serializer = TaskByIDSerializer(task)
#     return Response(serializer.data, status=status.HTTP_200_OK)

# # _____ Task 3 HW_12. –ê–≥—Ä–µ–≥–∏—Ä—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á
        # –°–æ–∑–¥–∞–π—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á, —Ç–∞–∫–∏—Ö –∫–∞–∫ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞—Ç—É—Å—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
        # –®–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö.
        # –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é.
        # –û—Ñ–æ—Ä–º–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
        # –ö–æ–¥ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: –í—Å—Ç–∞–≤—å—Ç–µ –≤–µ—Å—å –∫–æ–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤.
        # –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏ –∏–ª–∏ Postman, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞.

# # # ____ Task 3.1 –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
@api_view(['GET'])
def task_count(request):
    count = Task.objects.count()
    return Response({'total_tasks': count}, status=status.HTTP_200_OK)

# # ____ Task 3.2 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–∞—Ç—É—Å—É
@api_view(['GET'])
def task_per_status(request):
    tasks_per_status = Task.objects.values('status').annotate(count=Count('status'))
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç {"New": 5, "Done": 3, ...}
    result = {item['status']: item['count'] for item in tasks_per_status}
    return Response(result, status=status.HTTP_200_OK)

# # ____ Task 3.3 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
@api_view(['GET'])
def overdue_tasks_count(request):
    today = now().date()
    # —Å—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö deadline –≤ –ø—Ä–æ—à–ª–æ–º –∏ —Å—Ç–∞—Ç—É—Å –Ω–µ "Done"
    count = Task.objects.filter(deadline__lt=today).exclude(status='Done').count()
    return Response({'overdue_tasks': count}, status=status.HTTP_200_OK)



# # ____ Other tasks from others HW

# def test(request):
#     # print("üîç test() was triggered")
#     return HttpResponse("üß™ Test endpoint is alive!")
#
# # ----- CREATING -----
#
#     # –ù–∞–π–¥—ë–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ–µ–∫—Ç
#     today = timezone.now()
#     project, _ = Project.objects.get_or_create(name="Entertainment")
#     # –ù–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ ¬´_¬ª –§—É–Ω–∫—Ü–∏—è get_or_create(...) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π: python
#     # CopyEdit (instance, created) = Model.objects.get_or_create(...) *instance ‚Äî –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö(–ª–∏–±–æ
#     # –Ω–∞–π–¥–µ–Ω–Ω—ã–π, –ª–∏–±–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π), *created ‚Äî True, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω, –∏ False, –µ—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω.
#
#     # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–¥–∞—á–∏ Task (–µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
#     new_task = Task(
#         title="Prepare presentation",
#         description="Prepare materials and slides for the presentation",
#         status="New",
#         deadline="2025-06-22",
#         project=project
#     )
#     # –í–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
#     new_task.title = "Presentation Preparation"  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
#     new_task.save()
#
#
#     # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É –¥–ª—è SubTask
#     task, created = Task.objects.get_or_create(
#         title="Main Task for Subtask",
#         defaults={
#             "description": "Main task that will own a subtask",
#             "status": "New",
#             "deadline": "2025-06-28",
#             "project": project
#         }
#     )
#
#     # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∑–∞–¥–∞—á—É SubTask (–µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
#     new_subtask = SubTask(
#         title="Research topic",
#         description="Find articles and videos about the topic",
#         status="New",
#         deadline="2025-06-25",
#         task=task
#     )
#     # –í–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
#     new_subtask.title = "Find useful resources"
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
#     new_subtask.save()
#
#
#     # –°–æ–∑–¥–∞–µ–º SubTask —Å Title "Create slides".
#     # –ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å Task, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –±—É–¥–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è
#     task, created = Task.objects.get_or_create(
#         title="Prepare presentation",
#         defaults={
#             "description": "Prepare materials and slides for the presentation",
#             "status": "New",
#             "deadline": today + timedelta(days=3),
#             "project": project
#         }
#     )
#     # –°–æ–∑–¥–∞—ë–º SubTask
#     new_subtask, created = SubTask.objects.get_or_create(
#         title="Create slides",
#         task=task,
#         defaults={
#             "description": "Create presentation slides",
#             "status": "New",
#             "deadline": today + timedelta(days=1),
#         }
#     )
#
    # return HttpResponse("Congrats, Task and SubTask have been created!")
#
# # ----- READING -----
# # –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å "New".
# def show_new_tasks(request):
#     tasks = Task.objects.filter(status="New")
#     task_list = ", ".join([task.title for task in tasks])
#     return HttpResponse(f"New tasks: {task_list}")
#
# # –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å "Done", –Ω–æ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫.
# def show_overdue_done_subtasks(request):
#     now = timezone.now()
#     show_overdue_done_subtasks = SubTask.objects.filter(
#         Q(status="Done") & Q(deadline__lt=now)
#     )
#     subtask_list = ", ".join([subtask.title for subtask in show_overdue_done_subtasks])
#     return HttpResponse(f"Overdue 'Done' SubTasks: {subtask_list}")


# # ----- UPDATING -----
# # –ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å "Prepare presentation" –Ω–∞ "In progress".
# task_update_status = Task.objects.filter(title__iexact="Prepare presentation").update(status='In_Progress') # –ù–µ–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞
# print(task_update_status)
#
# # –ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è "Gather information" –Ω–∞ –¥–≤–∞ –¥–Ω—è –Ω–∞–∑–∞–¥.
# day = timezone.now()
# subtask_update_deadline = SubTask.objects.filter(title__iexact="Gather information").update(deadline=day-timedelta(days=2))
# print(subtask_update_deadline)
#
# # –ò–∑–º–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "Create slides" –Ω–∞ "Create and format presentation slides".
# subtask_update_description = SubTask.objects.filter(title__iexact="Create slides").update(description="Create and format presentation slides")
#
# # ----- DELETING -----
# task_to_delete = Task.objects.get(title="Prepare presentation")
# task_to_delete.delete()


# _____ HW_13 Task 5. –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∑–∞–¥–∞—á
# _____ HW_14 Task 2. –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–¥–∞–Ω–∏–µ–º –æ–±–Ω–æ–≤–∏–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
# class SubTaskListCreateView(APIView):
#     def get(self, request):
#         subtasks = SubTask.objects.all().order_by('-created_at')  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
#         paginator = PageNumberPagination()
#         paginator.page_size = 5
#
#         result_page = paginator.paginate_queryset(subtasks, request)
#         serializer = SubTaskCreateSerializer(result_page, many=True)
#         return paginator.get_paginated_response(serializer.data)
#
#     def post(self, request):
#         serializer = SubTaskCreateSerializer(data=request.data)
#         if serializer.is_valid():
#             serializer.save()
#             return Response(serializer.data, status=status.HTTP_201_CREATED)
#         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# _____ HW_13 Task5. –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏ –ø–æ ID
# class SubTaskDetailUpdateDeleteView(APIView):
#     def get_object(self, pk):
#         try:
#             return SubTask.objects.get(pk=pk)
#         except SubTask.DoesNotExist:
#             return None
#
#     def get(self, request, pk):
#         subtask = self.get_object(pk)
#         if not subtask:
#             return Response({'error': 'SubTask not found'}, status=status.HTTP_404_NOT_FOUND)
#         serializer = SubTaskCreateSerializer(subtask)
#         return Response(serializer.data)
#
#     def put(self, request, pk):
#         subtask = self.get_object(pk)
#         if not subtask:
#             return Response({'error': 'SubTask not found'}, status=status.HTTP_404_NOT_FOUND)
#         serializer = SubTaskCreateSerializer(subtask, data=request.data)
#         if serializer.is_valid():
#             serializer.save()
#             return Response(serializer.data)
#         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
#
#     def delete(self, request, pk):
#         subtask = self.get_object(pk)
#         if not subtask:
#             return Response({'error': 'SubTask not found'}, status=status.HTTP_404_NOT_FOUND)
#         subtask.delete()
#         return Response({'message': 'SubTask deleted'}, status=status.HTTP_204_NO_CONTENT)

# _____ HW_14 Task 1.
# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
@api_view(['GET'])
def tasks_by_weekday(request):
    weekday_param = request.GET.get('weekday', None)  # –ø–æ–ª—É—á–∞–µ–º ?weekday=...

    # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    if not weekday_param:
        tasks = Task.objects.all()
        serializer = AllTasksListSerializer(tasks, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –≤ –Ω–æ–º–µ—Ä (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    weekdays_map = {
        'monday': 0,
        'tuesday': 1,
        'wednesday': 2,
        'thursday': 3,
        'friday': 4,
        'saturday': 5,
        'sunday': 6
    }

    weekday_param = weekday_param.lower()
    if weekday_param not in weekdays_map:
        return Response({'error': 'Invalid weekday. Use names like monday, tuesday, etc.'},
                        status=status.HTTP_400_BAD_REQUEST)

    weekday_number = weekdays_map[weekday_param]

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ deadline)
    tasks = Task.objects.filter(deadline__week_day=((weekday_number + 1) % 7 + 1))
    # +2 –∏ %7 –Ω—É–∂–Ω—ã, —Ç.–∫. –≤ Django –Ω–µ–¥–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è (1)

    serializer = AllTasksListSerializer(tasks, many=True)
    return Response(serializer.data, status=status.HTTP_200_OK)

# HW_14 Task 3.
# –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–∑–∞–¥–∞—á –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–ª–∞–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏ —Å—Ç–∞—Ç—É—Å—É –ø–æ–¥–∑–∞–¥–∞—á.
# –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏—Å—å - –≤—ã–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å —É—á—ë—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
# –ï—Å–ª–∏ –±—ã –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ - –≤—ã–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–π –≥–ª–∞–≤–Ω–æ–π –∑–∞–¥–∞—á–µ.
# –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏ - –≤—ã–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É —Å—Ç–∞—Ç—É—Å—É.
# –ï—Å–ª–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –æ–±–∞ —Ñ–∏–ª—å—Ç—Ä–∞ - –≤—ã–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —ç—Ç–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.

# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º generics.ListAPIView
class FilteredSubTaskListView(generics.ListAPIView):
    serializer_class = SubTaskCreateSerializer

    def get_queryset(self):
        queryset = SubTask.objects.all().order_by('-created_at')
        task_title = self.request.query_params.get('task_title')
        status_param = self.request.query_params.get('status')

        if task_title:
            queryset = queryset.filter(task__title__icontains=task_title)
        if status_param:
            queryset = queryset.filter(status__iexact=status_param)

        return queryset

# HW_15 Task 1. –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ –¥–≤–∞ –∫–ª–∞—Å—Å–∞ –≤–º–µ—Å—Ç–æ
# - @api_view(['POST']) def new_task(...)
# - @api_view(['GET']) def all_tasks_list(...)
# - @api_view(['GET']) def view_task_by_id(...)

class TaskListCreateView(generics.ListCreateAPIView):
    queryset = Task.objects.all()
    # serializer_class = TaskListSerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
    filterset_fields = ['status', 'deadline']
    search_fields = ['title', 'description']
    pagination_class = BookCursorPagination
    ordering_fields = ['created_at']
    ordering = ['-created_at']
    #
    def get_serializer_class(self):
        if self.request.method == 'GET':
            return TaskListSerializer
        return TaskCreateSerializer
    # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–æ–º –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)

    # def list(self, request, *args, **kwargs):
    #     # filters = {}
    #     # created_at_week_day = request.query_params.get('weekday')
    #
    #     # if created_at_week_day:
    #     # filters['created_at__week_day'] = int(created_at_week_day)
    #
    #     queryset = self.get_queryset()
    #
    #     # if filters:
    #     # queryset = queryset.filter(**filters)
    #
    #     queryset = self.filter_queryset(queryset)
    #
    #     page = self.paginate_queryset(queryset)
    #
    #     if page is not None:
    #         serializer = self.get_serializer(page, many=True)
    #         return self.get_paginated_response(serializer.data)
    #
    #     serializer = self.get_serializer(queryset, many=True)
    #
    #     return Response(serializer.data, status=status.HTTP_200_OK)

class TaskDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Task.objects.all()
    serializer_class = TaskByIDSerializer
    lookup_field = 'id'
    permission_classes = [IsAdminOrOwner]  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω

# _____ HW_15 Task 2. –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–¥–∞–Ω–∏–µ–º –∑–∞–º–µ–Ω—è—é —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è SubTaskListCreateView (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∑–∞–¥–∞—á)
# –∏ SubTaskDetailUpdateDeleteView (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏), –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ APIView, –Ω–∞ Generic Views
# –°–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å HW_13 –≤—ã—à–µ. –¢–∞–º –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã (—Å—Ç—Ä–æ–∫–∏ 248-295)
# –¢–∞–∫–∂–µ:
# –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ status –∏ deadline.
# –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ title –∏ description.
# –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ created_at.

class SubTaskListCreateView(generics.ListCreateAPIView):
    queryset = SubTask.objects.all()
    serializer_class = SubTaskCreateSerializer
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_class = SubTaskFilter  # –≤–æ—Ç —Ç—É—Ç –≤–∞–∂–Ω–æ
    search_fields = ['title', 'description']
    ordering_fields = ['created_at']


class SubTaskDetailUpdateDeleteView(generics.RetrieveUpdateDestroyAPIView):
    queryset = SubTask.objects.all()
    serializer_class = SubTaskCreateSerializer


# # HW_16. Task 1.
# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è CRUD –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ModelViewSet, –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ.
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π CRUD –¥–ª—è –º–æ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (Categories) —Å –ø–æ–º–æ—â—å—é ModelViewSet, –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
# –ó–∞–¥–∞–Ω–∏–µ 1: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è CRUD –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ModelViewSet
# –®–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
# –°–æ–∑–¥–∞–π—Ç–µ CategoryViewSet, –∏—Å–ø–æ–ª—å–∑—É—è ModelViewSet –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π.
# –î–æ–±–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è CategoryViewSet.
# –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ count_tasks –∏—Å–ø–æ–ª—å–∑—É—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @action –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.
class CategoryViewSet(viewsets.ModelViewSet):
    queryset = Category.objects.filter(is_deleted=False)
    permission_classes = [IsAdminUser]

    def get_serializer_class(self):
        if self.request.method == 'GET':
            return CategorySerializer
        return CategoryCreateUpdateSerializer

    def perform_destroy(self, instance): # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        instance.is_deleted = True
        instance.save()

    @action(detail=True, methods=["get"])
    def count_tasks(self, request, pk=None): # –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–¥–∞—á –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = self.get_object()
        count = Task.objects.filter(categories=category).count()
        return Response({"category_id": category.id, "task_count": count})

# _______ access_token testing
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated

class ProfileView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        return Response({
            "username": request.user.username,
            "is_staff": request.user.is_staff,
            "is_superuser": request.user.is_superuser
        })


# HW_19 –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
# –®–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
# –û–±–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª–µ owner.
# –û–±–Ω–æ–≤–∏—Ç–µ –º–æ–¥–µ–ª–∏ Task –∏ SubTask –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—è owner.
# –ò–∑–º–µ–Ω–∏—Ç–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã.
# –ò–∑–º–µ–Ω–∏—Ç–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π Task –∏ SubTask –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º –ø–æ–ª–µ–º.
# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–µ—Ç–æ–¥ perform_create –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö.
# –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–±—ä–µ–∫—Ç–∞.

class TaskViewSet(viewsets.ModelViewSet):
    queryset = Task.objects.all()
    permission_classes = [IsAuthenticated, IsAdminOrOwner]

    def get_serializer_class(self):
        if self.action in ['list', 'retrieve']:
            return TaskListSerializer
        return TaskCreateSerializer

    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)  # üîπ –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞

    def get_queryset(self):
        """
        –ï—Å–ª–∏ ?my=true ‚Üí –≤–µ—Ä–Ω—É—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        queryset = super().get_queryset()
        if self.request.query_params.get('my') == 'true':
            return queryset.filter(owner=self.request.user)
        return queryset

    #_____ HW_19. –î–æ–±–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    @action(detail=False, methods=['get'], permission_classes=[IsAuthenticated])
    def my(self, request):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        tasks = Task.objects.filter(owner=request.user)
        serializer = TaskListSerializer(tasks, many=True)
        return Response(serializer.data)


class SubTaskViewSet(viewsets.ModelViewSet):
    queryset = SubTask.objects.all()
    serializer_class = SubTaskCreateSerializer
    permission_classes = [IsAuthenticated, IsAdminOrOwner]

    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)  # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞

# _____ HW_20
class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = RegisterSerializer
    permission_classes = [AllowAny]

class LogoutView(APIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [JWTAuthentication]

    def post(self, request):
        refresh_token = request.data.get("refresh")
        if not refresh_token:
            return Response({"detail": "Refresh token is required."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            token = RefreshToken(refresh_token)
            token.blacklist()
            return Response(
                {"detail": "Successfully logged out. Token has been blacklisted."},
                status=status.HTTP_205_RESET_CONTENT
            )
        except Exception:
            return Response(
                {"detail": "Invalid or expired token. Logout failed."},
                status=status.HTTP_400_BAD_REQUEST
            )

class CustomTokenObtainPairView(TokenObtainPairView):
    def post(self, request, *args, **kwargs):
        response = super().post(request, *args, **kwargs)
        data = response.data
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ httpOnly cookie
        response.set_cookie(
            key="access",
            value=data["access"],
            httponly=True,
            secure=True,
            samesite="Lax"
        )
        response.set_cookie(
            key="refresh",
            value=data["refresh"],
            httponly=True,
            secure=True,
            samesite="Lax"
        )
        return response