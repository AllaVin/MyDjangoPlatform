from datetime import timedelta
from django.shortcuts import render
from django.http import HttpResponse
from django.utils import timezone
from django.db.models import Q
from TaskManager_app.models import Task, Project, SubTask
from TaskManager_app.serializers import TaskCreateSerializer
from rest_framework.decorators import api_view
from rest_framework import status
from rest_framework.response import Response

# ___ HW_12. –ó–∞–¥–∞–Ω–∏–µ 1: –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
# –°–æ–∑–¥–∞–π—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–ª—è–º–∏ title, description, status, –∏ deadline.
# –®–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏ Task.
# –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.
# –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é.


@api_view(['POST'])
def new_task(request):
    serializer = TaskCreateSerializer(data=request.data)
    if serializer.is_valid():
        try:
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        except Exception as e:
            return Response({'detail': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



#
# def test(request):
#     # print("üîç test() was triggered")
#     return HttpResponse("üß™ Test endpoint is alive!")
#
# # ----- CREATING -----
#
#     # –ù–∞–π–¥—ë–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ–µ–∫—Ç
#     today = timezone.now()
#     project, _ = Project.objects.get_or_create(name="Entertainment")
#     # –ù–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ ¬´_¬ª –§—É–Ω–∫—Ü–∏—è get_or_create(...) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π: python
#     # CopyEdit (instance, created) = Model.objects.get_or_create(...) *instance ‚Äî –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö(–ª–∏–±–æ
#     # –Ω–∞–π–¥–µ–Ω–Ω—ã–π, –ª–∏–±–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π), *created ‚Äî True, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω, –∏ False, –µ—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω.
#
#     # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–¥–∞—á–∏ Task (–µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
#     new_task = Task(
#         title="Prepare presentation",
#         description="Prepare materials and slides for the presentation",
#         status="New",
#         deadline="2025-06-22",
#         project=project
#     )
#     # –í–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
#     new_task.title = "Presentation Preparation"  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
#     new_task.save()
#
#
#     # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É –¥–ª—è SubTask
#     task, created = Task.objects.get_or_create(
#         title="Main Task for Subtask",
#         defaults={
#             "description": "Main task that will own a subtask",
#             "status": "New",
#             "deadline": "2025-06-28",
#             "project": project
#         }
#     )
#
#     # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∑–∞–¥–∞—á—É SubTask (–µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
#     new_subtask = SubTask(
#         title="Research topic",
#         description="Find articles and videos about the topic",
#         status="New",
#         deadline="2025-06-25",
#         task=task
#     )
#     # –í–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
#     new_subtask.title = "Find useful resources"
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
#     new_subtask.save()
#
#
#     # –°–æ–∑–¥–∞–µ–º SubTask —Å Title "Create slides".
#     # –ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å Task, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –±—É–¥–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è
#     task, created = Task.objects.get_or_create(
#         title="Prepare presentation",
#         defaults={
#             "description": "Prepare materials and slides for the presentation",
#             "status": "New",
#             "deadline": today + timedelta(days=3),
#             "project": project
#         }
#     )
#     # –°–æ–∑–¥–∞—ë–º SubTask
#     new_subtask, created = SubTask.objects.get_or_create(
#         title="Create slides",
#         task=task,
#         defaults={
#             "description": "Create presentation slides",
#             "status": "New",
#             "deadline": today + timedelta(days=1),
#         }
#     )
#
#     return HttpResponse("Congrats, Task and SubTask have been created!")
#
# # ----- READING -----
# # –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å "New".
# def show_new_tasks(request):
#     tasks = Task.objects.filter(status="New")
#     task_list = ", ".join([task.title for task in tasks])
#     return HttpResponse(f"New tasks: {task_list}")
#
# # –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å "Done", –Ω–æ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫.
# def show_overdue_done_subtasks(request):
#     now = timezone.now()
#     show_overdue_done_subtasks = SubTask.objects.filter(
#         Q(status="Done") & Q(deadline__lt=now)
#     )
#     subtask_list = ", ".join([subtask.title for subtask in show_overdue_done_subtasks])
#     return HttpResponse(f"Overdue 'Done' SubTasks: {subtask_list}")


# # ----- UPDATING -----
# # –ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å "Prepare presentation" –Ω–∞ "In progress".
# task_update_status = Task.objects.filter(title__iexact="Prepare presentation").update(status='In_Progress') # –ù–µ–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞
# print(task_update_status)
#
# # –ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è "Gather information" –Ω–∞ –¥–≤–∞ –¥–Ω—è –Ω–∞–∑–∞–¥.
# day = timezone.now()
# subtask_update_deadline = SubTask.objects.filter(title__iexact="Gather information").update(deadline=day-timedelta(days=2))
# print(subtask_update_deadline)
#
# # –ò–∑–º–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "Create slides" –Ω–∞ "Create and format presentation slides".
# subtask_update_description = SubTask.objects.filter(title__iexact="Create slides").update(description="Create and format presentation slides")
#
# # ----- DELETING -----
# task_to_delete = Task.objects.get(title="Prepare presentation")
# task_to_delete.delete()

